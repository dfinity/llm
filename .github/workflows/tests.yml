name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  motoko-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Install mops
        run: |
          dfx cache install
          echo "$(dfx cache show)" >> $GITHUB_PATH
          curl -fsSL cli.mops.one/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run Motoko tests
        working-directory: ./motoko
        run: mops test

  rust-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        working-directory: ./rust
        run: cargo test --verbose

  rust-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: rust-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust clippy
        working-directory: ./rust
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check Rust formatting
        working-directory: ./rust
        run: cargo fmt -- --check

  typescript-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'
          cache-dependency-path: typescript/pnpm-lock.yaml

      - name: Install TypeScript dependencies
        working-directory: ./typescript
        run: pnpm install

      - name: Build TypeScript
        working-directory: ./typescript
        run: pnpm run build

      - name: TypeScript type check
        working-directory: ./typescript
        run: pnpm exec tsc --noEmit

  # Summary job that depends on all test jobs
  tests-summary:
    needs: [motoko-tests, rust-lint, typescript-build]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "üìä Test Results Summary:"
          echo "Motoko tests: ${{ needs.motoko-tests.result }}"
          echo "Rust lint (includes tests): ${{ needs.rust-lint.result }}"
          echo "TypeScript build: ${{ needs.typescript-build.result }}"
          echo ""
          
          if [[ "${{ needs.motoko-tests.result }}" == "success" && 
                "${{ needs.rust-lint.result }}" == "success" && 
                "${{ needs.typescript-build.result }}" == "success" ]]; then
            echo "‚úÖ All tests and checks passed!"
            exit 0
          else
            echo "‚ùå Some tests or checks failed!"
            exit 1
          fi 